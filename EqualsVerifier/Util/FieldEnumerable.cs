using System.Collections;
using System.Reflection;
using System.Collections.Generic;
using System;
using System.Runtime.InteropServices;

namespace EqualsVerifier.Util
{
    public class FieldEnumerable : IEnumerable<FieldInfo>
    {
        readonly IEnumerator<FieldInfo> _fields;
        readonly bool _includeSuperclasses;
        readonly Type _type;

        public static FieldEnumerable Of(Type type)
        {
            return new FieldEnumerable(type, true);
        }

        public static FieldEnumerable OfIgnoringSuper(Type type)
        {
            return new FieldEnumerable(type, false);
        }

        public FieldEnumerable(Type type, bool includeSuperclasses)
        {
            _type = type;
            _includeSuperclasses = includeSuperclasses;
            _fields = CreateFieldList().GetEnumerator();
        }

        IEnumerable<FieldInfo> CreateFieldList()
        {
            foreach (var field in FieldsFor(_type))
                yield return field;

            var baseClass = _type.BaseType;
            while (_includeSuperclasses && baseClass != null && baseClass != typeof(object))
            {
                foreach (var field in FieldsFor(baseClass))
                    yield return field;

                baseClass = baseClass.BaseType;
            }
        }

        static IEnumerable<FieldInfo> FieldsFor(IReflect type)
        {
            foreach (var field in type.GetFields(FieldHelper.DeclaredOnly))
            {
                // Filter out fields generated by Castle.DynamicProxy
                // Filter out Reflection Studd
                if (!field.FieldType.FullName.StartsWith("Castle", StringComparison.Ordinal)
                    && !field.FieldType.FullName.StartsWith("System.Reflection", StringComparison.Ordinal))
                    yield return field;
            }
        }

        public IEnumerator<FieldInfo> GetEnumerator()
        {
            return _fields;
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _fields;
        }

    }
}

