
namespace EqualsVerifier
{
    public enum Warning
    {
        /// <summary>
        /// Disables annotation processing for the class under test.
        /// <para>
        /// Suppress this warning if <see cref="EqualsVerifier"/> cannot read the bytecode
        /// for the class under test. This can happen when the class does not exist
        /// in a .class file on the file system, for example when it was dynamically
        /// generated by a bytecode manipulation tool.
        /// </para>
        /// Suppressing this warning has no effect when the bytecode can be read.
        /// </summary>
        ATTRIBUTE,

        ///<summary>
        /// Disables the check, when the <code>Equals</code> method is overridden in the
        /// class under test, that an instance of this class should be equal to an
        /// identical copy of itself.
        /// <para>
        /// Normally, it is important that an object be equal to an identical copy of
        /// itself: after all, this is the point of overriding <code>Equals</code> in the
        /// first place.
        /// <para>
        /// However, when the class is part of a hierarchy, but should be
        /// (pseudo-)singleton, it can be useful to suppress this warning. This can
        /// happen in certain implementations of the Null Object Pattern, for
        /// example.
        /// </para>
        /// If this warning is suppressed, and it turns out that an instance of the
        /// class under test is equal to an identical copy of itself after all,
        /// <see cref="EqualsVerifier"/> will fail.
        /// </summary>
        IDENTICAL_COPY,

        /// <summary>
        /// Disables the check, when the <code>Equals</code> method is overridden in the
        /// class under test, that an instance of this class should be equal to an
        /// identical copy of itself.
        /// <para>
        /// Normally, it is important that an object be equal to an identical copy of
        /// itself: after all, this is the point of overriding {@code equals} in the
        /// first place.
        /// </para><para>
        /// However, when the class is a kind of versioned entity and there is an
        /// <code>id</code> field that is zero when the object is new, it is often the
        /// case that two new objects are never equal to each other. In these cases,
        /// it can be useful to suppress this warning.
        /// </para><para>
        /// You cannot use <see cref="IDENTICAL_COPY"/> in these cases, because when the
        /// <code>id<</code>s are equal, the objects should be, too, and
        /// <see cref="EqualsVerifier"/> would fail in this case.
        /// </para>
        /// If this warning is suppressed, and it turns out that an instance of the
        /// class under test is equal to an identical copy of itself after all,
        /// <see cref="EqualsVerifier"/> will NOT fail.
        /// </summary>
        IDENTICAL_COPY_FOR_VERSIONED_ENTITY,

        /// <summary>
        /// Disables checks for non-readonly fields on which <code>Equals</code> and
        /// <code>GetHashCode</code> depend.
        /// <para>
        /// <see cref="EqualsVerifier"/>'s standard behaviour is to disallow non-readonly
        /// fields being used in <code>Equals</code> and <code>GetHashCode</code> methods, since
        /// classes that depend on non-readonly fields in these methods cannot reliably
        /// be used in collections.
        /// </para>
        /// However, sometimes an external library requires that fields be
        /// non-readonly. In such a case, suppress
        /// this warning to prevent <see cref="EqualsVerifier"/> from checking for
        /// non-final fields.
        /// </summary>
        NONFINAL_FIELDS,
       
        /// <summary>
        /// Disables checks for NullPointerException within <code>Equals</code>,
        /// <code>GetHashCode</code> and <code>ToString</code> methods.
        /// <para>
        /// Sometimes the constructor of a class makes sure no field can be null.
        /// If this is the case, and if the fields cannot be made null later in the
        /// lifecycle of the class by setters or other methods, suppress this
        /// warning to disable the check for NullPointerException.
        /// </para>
        /// </summary>
        NULL_FIELDS,


        /// <summary>
        /// Disables some of the stricter inheritance tests; use at your own risk!
        /// <para>
        /// <see cref="EqualsVerifier"/>'s standard behaviour, if T is not final and
        /// neither are its <code>Equals</code> and <code>GetHashCode</code> methods, is to
        /// require a reference to a subclass of T for which no instance can be
        /// equal to any instance of T, to make sure that subclasses that can
        /// redefine <code>Equals</code> or <code>GetHashCode</code> don't break the contract.
        /// </para>
        /// Some may find that too strict for their liking; suppressing this warning
        /// disables that test.
        /// <see cref="EqualsVerifier.WithRedefinedSubclass" />
        /// </summary>
        STRICT_INHERITANCE
    }
}

